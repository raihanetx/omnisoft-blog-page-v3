
import { BlogPost } from './types';

export const BLOG_POSTS: BlogPost[] = [
    { id: 1, category: 'frontend', title: 'Getting Started With React', subtitle: 'A comprehensive guide to kickstart your React journey.', author: 'John Doe', date: 'August 10, 2026', avatar: 'https://i.pravatar.cc/150?img=3', imageUrl: 'https://i.postimg.cc/PJDW8fDQ/pexels-danny-meneses-340146-943096.jpg', tags: ['React', 'TypeScript', 'Tailwind'], content: `<p>In the world of web development, React has established itself as a dominant force for building user interfaces. This guide will walk you through the absolute basics to get you up and running with your first React application, from setup to your first component.</p><h2 class="text-white">Setting up Your Environment</h2><p>The easiest way to start is by using Create React App, a command-line tool that sets up a new React project with a sensible default configuration. It handles all the complex setup like Babel and Webpack for you.</p><div class="relative"><button class="absolute top-6 right-6 text-xs text-gray-400 hover:text-white transition-colors z-10">Copy</button><pre><code class="language-bash">npx create-react-app my-first-react-app\ncd my-first-react-app\nnpm start</code></pre></div><h2 class="text-white">Understanding JSX</h2><p>JSX (JavaScript XML) is a syntax extension for JavaScript that looks similar to HTML. It allows you to write your component's markup directly within your JavaScript code, making it more readable and expressive.</p>` },
    { id: 2, category: 'frontend', title: 'Advanced TypeScript Patterns', subtitle: 'Leverage the full power of TypeScript in your projects.', author: 'Jane Smith', date: 'August 11, 2026', avatar: 'https://i.pravatar.cc/150?img=5', imageUrl: 'https://i.postimg.cc/QxLkZ5L4/pexels-goumbik-574070.jpg', tags: ['TypeScript', 'Next.js'], content: `<p>TypeScript is more than just types. Advanced patterns like conditional types, mapped types, and decorators can dramatically improve the robustness and maintainability of your codebase. This post explores some of these powerful features.</p><h2 class="text-white">Conditional Types</h2><p>Conditional types in TypeScript allow you to choose types based on conditions. They take a form that looks a lot like conditional expressions (<code>condition ? trueExpression : falseExpression</code>) in JavaScript.</p><div class="relative"><button class="absolute top-6 right-6 text-xs text-gray-400 hover:text-white transition-colors z-10">Copy</button><pre><code class="language-typescript">interface IdLabel { id: number; /*...*/ }\ninterface NameLabel { name: string; /*...*/ }\n\ntype NameOrId<T extends number | string> = \nT extends number \n  ? IdLabel \n  : NameLabel;</code></pre></div>` },
    { id: 3, category: 'frontend', title: 'UI Design With Tailwind CSS', subtitle: 'Create beautiful, modern designs without leaving your HTML.', author: 'Alex Ray', date: 'August 12, 2026', avatar: 'https://i.pravatar.cc/150?img=8', imageUrl: 'https://i.postimg.cc/Y2LfPRPL/pexels-goumbik-574080.jpg', tags: ['TailwindCSS', 'UI/UX'], content: `<p>Tailwind CSS is a utility-first CSS framework that provides low-level utility classes to build custom designs directly in your markup. This approach allows for rapid UI development and easy maintenance without writing custom CSS.</p><h2 class="text-white">The Utility-First Concept</h2><p>Instead of pre-styled components like in Bootstrap, Tailwind provides primitive utilities like <code>flex</code>, <code>pt-4</code>, <code>text-center</code> that you can compose to build any design directly in your HTML.</p><div class="relative"><button class="absolute top-6 right-6 text-xs text-gray-400 hover:text-white transition-colors z-10">Copy</button><pre><code class="language-html">&lt;div class="p-6 max-w-sm mx-auto bg-white rounded-xl"&gt;\n  &lt;p class="text-slate-500"&gt;You have a new message!&lt;/p&gt;\n&lt;/div&gt;</code></pre></div>` },
    { id: 4, category: 'frontend', title: 'Mastering Vue.js Composition API', subtitle: 'A deep dive into the flexible and powerful Composition API.', author: 'John Doe', date: 'August 14, 2026', avatar: 'https://i.pravatar.cc/150?img=3', imageUrl: 'https://i.postimg.cc/JzMNGLzj/pexels-hiteshchoudhary-1261427.jpg', tags: ['Vue.js', 'JavaScript'], content: `<p>The Vue 3 Composition API provides a new way to organize component logic. It allows for better code organization and reuse, especially in larger and more complex components, by grouping related logic together instead of scattering it across different options like <code>data</code>, <code>methods</code>, and <code>computed</code>.</p><h2 class="text-white">Example: A Reusable Counter</h2><p>Here's how you can create a reusable counter logic as a composable function.</p><div class="relative"><button class="absolute top-6 right-6 text-xs text-gray-400 hover:text-white transition-colors z-10">Copy</button><pre><code class="language-javascript">// counter.js\nimport { ref } from 'vue'\n\nexport function useCounter() {\n  const count = ref(0)\n  function increment() {\n    count.value++\n  }\n  return { count, increment }\n}</code></pre></div>` },
    { id: 5, category: 'frontend', title: 'Svelte vs React: A Deep Dive', subtitle: 'Comparing two giants of the frontend world.', author: 'Jane Smith', date: 'August 15, 2026', avatar: 'https://i.pravatar.cc/150?img=5', imageUrl: 'https://i.postimg.cc/6QQCffR3/pexels-kevin-ku-92347-577585.jpg', tags: ['Svelte', 'React', 'Benchmark'], content: `<p>React's virtual DOM and Svelte's compile-time approach offer different trade-offs. While React does its work in the browser at runtime, Svelte shifts that work into a compile step that happens when you build your app.</p><h2 class="text-white">Key Differences</h2><p>The most significant difference is the absence of a Virtual DOM in Svelte. Svelte knows at build time how things could change in your app, rather than waiting to do the work at run time. This results in smaller bundle sizes and often faster performance.</p>` },
    { id: 6, category: 'frontend', title: 'Introduction to WebAssembly', subtitle: 'Bringing near-native performance to the web.', author: 'Alex Ray', date: 'August 18, 2026', avatar: 'https://i.pravatar.cc/150?img=8', imageUrl: 'https://i.postimg.cc/8z4hv079/pexels-luis-gomes-166706-546819.jpg', tags: ['WASM', 'Rust', 'Performance'], content: `<p>WebAssembly (WASM) is a binary instruction format for a stack-based virtual machine. It's designed as a portable target for the compilation of high-level languages like C++, C#, and Rust, enabling deployment on the web for client and server applications.</p><h2 class="text-white">Why Use It?</h2><p>JavaScript is fast, but for computationally intensive tasks like video editing, 3D rendering, or complex calculations, the performance can be a bottleneck. WebAssembly provides a way to run code written in other languages on the web at near-native speed.</p>` },
    { id: 7, category: 'backend', title: 'Building REST APIs with Node.js', subtitle: 'An essential guide for modern backend developers.', author: 'John Doe', date: 'September 01, 2026', avatar: 'https://i.pravatar.cc/150?img=3', imageUrl: 'https://i.postimg.cc/VLj9f6mY/pexels-markusspiske-1089438.jpg', tags: ['Node.js', 'Express.js'], content: `<p>Node.js, combined with the Express framework, is a powerful combination for building fast and scalable REST APIs. This post covers routing, middleware, and connecting to a database.</p><h2 class="text-white">Basic Express Server</h2><p>Here's how simple it is to get a basic server running with Express.</p><div class="relative"><button class="absolute top-6 right-6 text-xs text-gray-400 hover:text-white transition-colors z-10">Copy</button><pre><code class="language-javascript">const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(port, () => {\n  console.log(\`App listening on port \${port}\`)\n})</code></pre></div>` },
    { id: 8, category: 'backend', title: 'Scaling with Microservices', subtitle: 'Architecting for growth and resilience.', author: 'Laura Bailey', date: 'September 02, 2026', avatar: 'https://i.pravatar.cc/150?img=12', imageUrl: 'https://i.postimg.cc/MTN0TfnG/pexels-pixabay-159299.jpg', tags: ['Docker', 'Kubernetes'], content: `<p>Microservices architecture allows large applications to be separated into smaller, independent services. This article discusses the benefits and challenges, along with tools like Docker and Kubernetes that make it possible.</p><h2 class="text-white">Benefits of Microservices</h2><p>Key advantages include improved scalability, better fault isolation (if one service fails, others continue to work), and the ability for teams to work independently on different services using different technology stacks.</p>` },
    { id: 9, category: 'backend', title: 'GraphQL APIs with NestJS', subtitle: 'A structured approach to building powerful APIs.', author: 'John Doe', date: 'September 05, 2026', avatar: 'https://i.pravatar.cc/150?img=3', imageUrl: 'https://i.postimg.cc/26VFr78J/pexels-rahulp9800-1933900.jpg', tags: ['NestJS', 'GraphQL'], content: `<p>NestJS provides a robust, out-of-the-box application architecture that makes building efficient, scalable, and maintainable GraphQL APIs a breeze. It uses TypeScript and is heavily inspired by Angular.</p><h2 class="text-white">Defining a Resolver</h2><p>In NestJS with GraphQL, resolvers are used to define how queries and mutations are handled for a specific part of your data graph.</p><div class="relative"><button class="absolute top-6 right-6 text-xs text-gray-400 hover:text-white transition-colors z-10">Copy</button><pre><code class="language-typescript">@Resolver(of => Author)\nexport class AuthorsResolver {\n  constructor(\n    private authorsService: AuthorsService\n  ) {}\n\n  @Query(returns => Author)\n  async author(@Args('id') id: number) {\n    return this.authorsService.findOneById(id);\n  }\n}</code></pre></div>` },
    { id: 10, category: 'backend', title: 'Building Web Apps with Python & Django', subtitle: 'The "batteries-included" framework for rapid development.', author: 'Chris Green', date: 'September 08, 2026', avatar: 'https://i.pravatar.cc/150?img=11', imageUrl: 'https://i.postimg.cc/PJDW8fDQ/pexels-danny-meneses-340146-943096.jpg', tags: ['Python', 'Django'], content: `<p>Django is a high-level Python web framework that encourages rapid development and clean, pragmatic design. Its "batteries-included" philosophy means it comes with many features out of the box, such as an ORM, admin interface, and authentication.</p><h2 class="text-white">Creating a Simple View</h2><p>A view function in Django is a Python function that takes a web request and returns a web response. This response can be the HTML contents of a Web page, a redirect, or an error.</p><div class="relative"><button class="absolute top-6 right-6 text-xs text-gray-400 hover:text-white transition-colors z-10">Copy</button><pre><code class="language-python">from django.http import HttpResponse\n\ndef index(request):\n    return HttpResponse("Hello, world.")</code></pre></div>` },
    { id: 11, category: 'backend', title: 'High-Performance Services with Go', subtitle: 'Exploring concurrency and speed with Golang.', author: 'Jane Smith', date: 'September 10, 2026', avatar: 'https://i.pravatar.cc/150?img=5', imageUrl: 'https://i.postimg.cc/QxLkZ5L4/pexels-goumbik-574070.jpg', tags: ['Go', 'Concurrency'], content: `<p>Go, or Golang, is renowned for its simplicity and powerful support for concurrent programming through goroutines and channels. This makes it an excellent choice for building high-performance network services and APIs that need to handle many connections simultaneously.</p><h2 class="text-white">Goroutines</h2><p>A goroutine is a lightweight thread managed by the Go runtime. Starting a goroutine is as simple as adding the <code>go</code> keyword before a function call.</p><div class="relative"><button class="absolute top-6 right-6 text-xs text-gray-400 hover:text-white transition-colors z-10">Copy</button><pre><code class="language-go">func say(s string) {\n    for i := 0; i < 5; i++ {\n        time.Sleep(100 * time.Millisecond)\n        fmt.Println(s)\n    }\n}\n\nfunc main() {\n    go say("world")\n    say("hello")\n}</code></pre></div>` },
    { id: 12, category: 'backend', title: 'Working with PostgreSQL', subtitle: 'A deep dive into the world\'s most advanced open source database.', author: 'Laura Bailey', date: 'September 15, 2026', avatar: 'https://i.pravatar.cc/150?img=12', imageUrl: 'https://i.postimg.cc/Y2LfPRPL/pexels-goumbik-574080.jpg', tags: ['PostgreSQL', 'Database', 'SQL'], content: `<p>PostgreSQL is a powerful, open-source object-relational database system with over 30 years of active development that has earned it a strong reputation for reliability, feature robustness, and performance. This post covers advanced queries, indexing, and performance tuning.</p><h2 class="text-white">Common Table Expressions (CTEs)</h2><p>CTEs, or <code>WITH</code> queries, are a powerful feature for breaking down complex queries into simpler, more readable parts. They act like temporary tables that exist only for the duration of the query.</p><div class="relative"><button class="absolute top-6 right-6 text-xs text-gray-400 hover:text-white transition-colors z-10">Copy</button><pre><code class="language-sql">WITH regional_sales AS (\n    SELECT region, SUM(amount) AS total_sales\n    FROM orders\n    GROUP BY region\n) \nSELECT region, total_sales\nFROM regional_sales;</code></pre></div>` },
];
